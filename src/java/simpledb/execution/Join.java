package simpledb.execution;

import simpledb.common.DbException;
import simpledb.storage.Tuple;
import simpledb.storage.TupleDesc;
import simpledb.transaction.TransactionAbortedException;

import java.util.NoSuchElementException;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;
    private final JoinPredicate p;
    private final TupleDesc td;
    private OpIterator child1;
    private OpIterator child2;
    private Tuple outer = null;

    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     *
     * @param p      The predicate to use to join the children
     * @param child1 Iterator for the left(outer) relation to join
     * @param child2 Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        this.p = p;
        this.child1 = child1;
        this.child2 = child2;
        /* Directly merge. */
        td = TupleDesc.merge(
                this.child1.getTupleDesc(),
                this.child2.getTupleDesc());
    }

    public JoinPredicate getJoinPredicate() {
        return p;
    }

    /**
     * @return the field name of join field1. Should be quantified by
     *         alias or table name.
     */
    public String getJoinField1Name() {
        return child1.getTupleDesc().getFieldName(p.getField1());
    }

    /**
     * @return the field name of join field2. Should be quantified by
     *         alias or table name.
     */
    public String getJoinField2Name() {
        return child2.getTupleDesc().getFieldName(p.getField2());
    }

    /**
     * @see TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        return td;
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        child1.open();
        child2.open();
        super.open();
    }

    public void close() {
        super.close();
        child1.close();
        child2.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        outer = null;
        child1.rewind();
        child2.rewind();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     *
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        /* Initialize outer tuple on first call. */
        if (outer == null) {
            if (child1.hasNext())
                outer = child1.next();
            else
                return null;
        }
        /* Search next match within current outer loop. */
        Tuple inner;
        while (child2.hasNext()) {
            inner = child2.next();
            if (p.filter(outer, inner)) {
                /* Join two tuples. */
                Tuple match = new Tuple(td);
                for (int i = 0; i < outer.getTupleDesc().numFields(); i++) {
                    match.setField(i, outer.getField(i));
                }
                int offset = outer.getTupleDesc().numFields();
                for (int i = 0; i < inner.getTupleDesc().numFields(); i++) {
                    match.setField(i + offset, inner.getField(i));
                }
                /*
                 * How to set record ID?
                 * For now, leave null unless explicitly materialized.
                 */
                return match;
            }
        }
        /* Not found, rewind inner, increment outer and recurse. */
        child2.rewind();
        if (child1.hasNext())
            outer = child1.next();
        else
            return null;
        return fetchNext();
    }

    @Override
    public OpIterator[] getChildren() {
        return new OpIterator[] { child1, child2 };
    }

    @Override
    public void setChildren(OpIterator[] children) {
        child1 = children[0];
        child2 = children[1];
    }

}
